===============
main.py 
===============

import sys
from PyQt5.QtWidgets import QApplication
from app_ui import MainWindow
import warnings

warnings.filterwarnings("ignore", category=FutureWarning)

def main():
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()

================
detection.py
================

import cv2
from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtGui import QImage, QPixmap
from ultralytics import YOLO
import torch
import time


class DetectionThread(QThread):
    frame_processed = pyqtSignal(QPixmap)
    detection_result = pyqtSignal(str)
    log_message = pyqtSignal(str)
    detection_summary = pyqtSignal(dict)
    warning_signal = pyqtSignal(str)
    pause_trigger = pyqtSignal(str)

    def __init__(self, source, model_path, confidence=0.5, frame_skip=1):
        super().__init__()
        self.source = source
        self.confidence = confidence
        self.frame_skip = frame_skip
        self.running = False
        self.paused = False
        self.consecutive_damaged_count = 0
        self.line_y_position = None
        self.tracked_objects = {}  # Dictionary to track objects crossing the line

        try:
            self.device = "cuda" if torch.cuda.is_available() else "cpu"
            self.model = YOLO(model_path)
            self.log_message.emit(f"Model loaded successfully on {self.device}.")
        except Exception as e:
            self.model = None
            self.log_message.emit(f"Error loading YOLO model: {e}")

    def run(self):
        if not self.model:
            self.log_message.emit("Detection cannot start. Model not loaded.")
            return

        self.running = True
        cap = cv2.VideoCapture(self.source)

        if not cap.isOpened():
            self.log_message.emit("Error: Could not open video source.")
            return

        frame_count = 0

        while self.running:
            if self.paused:
                continue

            ret, frame = cap.read()
            if not ret:
                self.log_message.emit("End of video or failed to grab frame.")
                break

            if frame_count % self.frame_skip != 0:
                frame_count += 1
                continue

            try:
                start_time = time.time()

                # Resize frame for better visualization in the display area
                frame = cv2.resize(frame, (800, 600))  # Adjust size as necessary

                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

                results = self.model.predict(
                    source=frame_rgb,
                    conf=self.confidence,
                    device=self.device,
                    agnostic_nms=True,
                    verbose=False
                )
                annotated_frame = self.annotate_frame(frame_rgb, results[0].boxes)

                height, width, channels = annotated_frame.shape
                qt_image = QImage(
                    annotated_frame.data, width, height,
                    channels * width, QImage.Format_RGB888
                )
                pixmap = QPixmap.fromImage(qt_image)
                self.frame_processed.emit(pixmap)

                damaged, intact = self.count_detections(results[0].boxes)
                self.handle_detections(damaged, intact)

                elapsed_time = time.time() - start_time
                self.detection_summary.emit({
                    "frame_count": frame_count,
                    "objects_detected": len(results[0].boxes),
                    "processing_time": elapsed_time,
                    "damaged": damaged,
                    "intact": intact,
                })

            except Exception as e:
                self.log_message.emit(f"Error during detection: {e}")
                break

            frame_count += 1

        cap.release()
        self.log_message.emit("Video source released. Detection thread stopped.")

    def annotate_frame(self, frame, boxes):
        """Annotates the frame with detection results and checks for line crossing."""
        if self.line_y_position is None:
            self.line_y_position = int(frame.shape[0] * 0.35)  # Default to 35% of the frame height

        line_color = (0, 255, 255)  # Yellow line
        line_thickness = 2
        cv2.line(frame, (0, self.line_y_position), (frame.shape[1], self.line_y_position), line_color, line_thickness)

        current_frame_objects = {}  # Dictionary to track objects in the current frame

        for box in boxes:
            x1, y1, x2, y2 = map(int, box.xyxy[0])  # Get bounding box coordinates
            confidence = float(box.conf[0])  # Confidence score
            cls = int(box.cls[0])  # Class ID

            label = "Damaged" if cls == 0 else "Intact"
            color = (255, 0, 0) if cls == 0 else (0, 255, 0)  # Red for damaged, green for intact
            display_text = f"{label}: {confidence:.2f}"
            cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
            cv2.putText(
                frame, display_text, (x1, y1 - 10),
                cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 1
            )

            # Generate an object ID based on its position
            object_id = (x1 + x2) // 2  # Horizontal midpoint as a simple ID
            current_frame_objects[object_id] = y2  # Track the current bottom position

            # Check for crossing the line
            if object_id in self.tracked_objects:
                previous_y2 = self.tracked_objects[object_id]  # Previous bottom position
                if previous_y2 < self.line_y_position <= y2:  # Crossed the line from above
                    self.tracked_objects[object_id] = y2  # Update to the current position
                    self.log_message.emit(f"{label} object crossed the line.")
                    if cls == 0:
                        self.detection_result.emit("Damaged")
                    else:
                        self.detection_result.emit("Intact")
            else:
                self.tracked_objects[object_id] = y2  # Initialize tracking for new object

        # Remove objects that are no longer in the frame
        self.tracked_objects = {
            obj_id: y2 for obj_id, y2 in self.tracked_objects.items()
            if obj_id in current_frame_objects
        }

        return frame



    def count_detections(self, boxes):
        damaged = sum(1 for box in boxes if int(box.cls) == 0)
        intact = sum(1 for box in boxes if int(box.cls) == 1)
        return damaged, intact

    def handle_detections(self, damaged, intact):
        if damaged > 0:
            self.consecutive_damaged_count += damaged
            if self.consecutive_damaged_count >= 10:
                self.warning_signal.emit("Warning: 10 consecutive damaged items detected. Pausing detection.")
                self.pause_trigger.emit("paused")
                self.paused = True
                self.consecutive_damaged_count = 0
        else:
            self.consecutive_damaged_count = 0

        for _ in range(damaged):
            self.detection_result.emit("Damaged")
        for _ in range(intact):
            self.detection_result.emit("Intact")

    def stop(self):
        self.running = False
        self.wait()

    def toggle_pause(self):
        self.paused = not self.paused
        state = "paused" if self.paused else "resumed"
        self.log_message.emit(f"Detection thread {state}.")

========================
app_ui.py
========================

from PyQt5.QtWidgets import (
    QMainWindow, QPushButton, QVBoxLayout, QHBoxLayout, QWidget, QTextEdit, QLabel, QFileDialog,
    QTableWidget, QTableWidgetItem, QHeaderView, QMessageBox
)
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import Qt
import datetime
import csv
from detection import DetectionThread


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Defect Detection Application")
        self.setGeometry(100, 100, 1200, 800)

        # Main Layout
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.main_layout = QVBoxLayout(self.central_widget)

        # Video Display Area
        self.video_label = QLabel()
        self.video_label.setStyleSheet("background-color: black;")
        self.video_label.setAlignment(Qt.AlignCenter)
        self.main_layout.addWidget(self.video_label, stretch=6)

        # Counter and Log Section
        self.stats_layout = QVBoxLayout()

        # Counter Layout
        self.counter_layout = QHBoxLayout()
        self.total_label = QLabel("Total Count: 0")
        self.damaged_label = QLabel("Damaged Count: 0")
        self.intact_label = QLabel("Intact Count: 0")
        for label in [self.total_label, self.damaged_label, self.intact_label]:
            label.setStyleSheet("font-size: 16px; padding: 5px;")
            self.counter_layout.addWidget(label)
        self.stats_layout.addLayout(self.counter_layout)

        # Log Area
        self.log_area = QTextEdit()
        self.log_area.setReadOnly(True)
        self.log_area.setStyleSheet("background-color: #f1f1f1; font-size: 14px;")
        self.log_area.setFixedHeight(100)
        self.stats_layout.addWidget(self.log_area)

        self.main_layout.addLayout(self.stats_layout, stretch=2)

        # Buttons Section
        self.button_layout = QHBoxLayout()
        self.create_button("Start Webcam", "#4CAF50", self.start_webcam_detection)
        self.create_button("Select File", "#008CBA", self.start_file_detection)
        self.create_button("Pause", "#FFC107", self.pause_detection)
        self.create_button("Resume", "#4CAF50", self.resume_detection)
        self.create_button("Stop", "#f44336", self.stop_detection)
        self.create_button("Export Report", "#673AB7", self.export_report)
        self.create_button("Open Graph", "#FF5722", self.open_graph_window)
        self.main_layout.addLayout(self.button_layout, stretch=1)

        # Table Section
        self.table_widget = QTableWidget()
        self.table_widget.setColumnCount(3)
        self.table_widget.setHorizontalHeaderLabels(["Timestamp", "Status", "Details"])
        self.table_widget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table_widget.setFixedHeight(120)
        self.main_layout.addWidget(self.table_widget, stretch=2)

        # Detection Thread Variables
        self.detection_thread = None
        self.total_count = 0
        self.damaged_count = 0
        self.intact_count = 0
        self.graph_window = None

    def create_button(self, text, color, action):
        button = QPushButton(text)
        button.setStyleSheet(f"background-color: {color}; color: white; font-size: 14px; padding: 8px;")
        button.clicked.connect(action)
        self.button_layout.addWidget(button)

    def update_display(self, pixmap: QPixmap):
        if pixmap:
            scaled_pixmap = pixmap.scaled(self.video_label.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation)
            self.video_label.setPixmap(scaled_pixmap)

    def update_counters(self, result: str):
        if result not in ["Damaged", "Intact"]:
            return
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        details = "Defective item detected." if result == "Damaged" else "Non-defective item."

        if result == "Damaged":
            self.damaged_count += 1
        else:
            self.intact_count += 1
        self.total_count += 1

        self.total_label.setText(f"Total Count: {self.total_count}")
        self.damaged_label.setText(f"Damaged Count: {self.damaged_count}")
        self.intact_label.setText(f"Intact Count: {self.intact_count}")

        # Update table
        row_position = self.table_widget.rowCount()
        self.table_widget.insertRow(row_position)
        self.table_widget.setItem(row_position, 0, QTableWidgetItem(timestamp))
        self.table_widget.setItem(row_position, 1, QTableWidgetItem(result))
        self.table_widget.setItem(row_position, 2, QTableWidgetItem(details))

    def append_log(self, message: str):
        self.log_area.append(message)
        self.log_area.verticalScrollBar().setValue(self.log_area.verticalScrollBar().maximum())

    def start_webcam_detection(self):
        self.start_detection(source=0)

    def start_file_detection(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Select Video File")
        if file_path:
            self.start_detection(source=file_path)

    def start_detection(self, source):
        if self.detection_thread and self.detection_thread.isRunning():
            self.stop_detection()

        self.detection_thread = DetectionThread(source, "models/best.pt")
        self.detection_thread.frame_processed.connect(self.update_display)
        self.detection_thread.detection_result.connect(self.update_counters)
        self.detection_thread.log_message.connect(self.append_log)
        self.detection_thread.start()

    def stop_detection(self):
        if self.detection_thread:
            self.detection_thread.stop()
            self.detection_thread = None

    def pause_detection(self):
        if self.detection_thread:
            self.detection_thread.toggle_pause()

    def resume_detection(self):
        if self.detection_thread:
            self.detection_thread.toggle_pause()

    def export_report(self):
        file_path, _ = QFileDialog.getSaveFileName(self, "Save Report", "", "CSV Files (*.csv)")
        if file_path:
            with open(file_path, "w", newline="") as file:
                writer = csv.writer(file)
                writer.writerow(["Timestamp", "Status", "Details"])
                for row in range(self.table_widget.rowCount()):
                    timestamp = self.table_widget.item(row, 0).text()
                    status = self.table_widget.item(row, 1).text()
                    details = self.table_widget.item(row, 2).text()
                    writer.writerow([timestamp, status, details])
            self.append_log(f"Report saved to {file_path}.")

    def open_graph_window(self):
        if not self.graph_window:
            self.graph_window = GraphWindow()
        self.graph_window.show()
